name: CI

on:
  pull_request:
  push:
    branches:
      - master
      - main
      - develop
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  checks: write

jobs:
  mc-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        num_runners: [3]
        runner_index: [0, 1, 2]
      # Run each shard to completion.
      fail-fast: false
    env:
      NUM_RUNNERS: ${{ matrix.num_runners }}
      RUNNER_INDEX: ${{ matrix.runner_index }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: List packages to test
        run: |
          cargo test -p 2>&1 | \
            grep mc- | \
            grep -v -e mc-fog -e mc-consensus | \
            awk "NR % $NUM_RUNNERS == $RUNNER_INDEX { print \"-p \" \$1 }" | \
            tee /tmp/mc-test-packages
      - name: Run tests
        uses: ./.github/actions/run-mc-tests
        with:
          args: $(cat /tmp/mc-test-packages)
          junit_xml_filename: junit-mc-tests-${{matrix.runner_index}}.xml

  consensus-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        num_runners: [2]
        runner_index: [0, 1]
      # Run each shard to completion.
      fail-fast: false
    env:
      NUM_RUNNERS: ${{ matrix.num_runners }}
      RUNNER_INDEX: ${{ matrix.runner_index }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: List packages to test
        run: |
          cargo test -p 2>&1 | \
            grep mc-consensus | \
            awk "NR % $NUM_RUNNERS == $RUNNER_INDEX { print \"-p \" \$1 }" | \
            tee /tmp/consensus-test-packages
      - name: Run tests
        uses: ./.github/actions/run-mc-tests
        with:
          args: $(cat /tmp/consensus-test-packages)
          junit_xml_filename: junit-consensus-tests-${{matrix.runner_index}}.xml

  fog-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        num_runners: [3]
        runner_index: [0, 1, 2]
      # Run each shard to completion.
      fail-fast: false
    env:
      NUM_RUNNERS: ${{ matrix.num_runners }}
      RUNNER_INDEX: ${{ matrix.runner_index }}
      TEST_DATABASE_URL: "postgres://postgres:postgres@postgres"

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: List packages to test
        run: |
          cargo test -p 2>&1 | \
            grep mc-fog | \
            grep -v mc-fog-ingest | \
            awk "NR % $NUM_RUNNERS == $RUNNER_INDEX { print \"-p \" \$1 }" | \
            tee /tmp/fog-test-packages
      - name: Run tests
        uses: ./.github/actions/run-mc-tests
        with:
          args: $(cat /tmp/fog-test-packages)
          junit_xml_filename: junit-fog-tests-${{matrix.runner_index}}.xml

    services:
      # Spin up a PostgreSQL server
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 (default postgres port) on service container to the host
          - 5432:5432

  fog-ingest-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: Run tests
        uses: ./.github/actions/run-mc-tests
        with:
          args: -p 'mc-fog-ingest-*'
          junit_xml_filename: junit-fog-ingest-tests.xml
    env:
      TEST_DATABASE_URL: "postgres://postgres:postgres@postgres"

    services:
      # Spin up a PostgreSQL server
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

  fog-conformance-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: Set up virtual environment
        run: |
          # Generate enclave signing key
          openssl genrsa -out Enclave_private.pem -3 3072
          export CONSENSUS_ENCLAVE_PRIVKEY=$PWD/Enclave_private.pem
          export INGEST_ENCLAVE_PRIVKEY=$PWD/Enclave_private.pem
          export LEDGER_ENCLAVE_PRIVKEY=$PWD/Enclave_private.pem
          export VIEW_ENCLAVE_PRIVKEY=$PWD/Enclave_private.pem

          # tell the operating system to remove the file size limit on core dump files
          ulimit -c unlimited

          # Build
          cd tools/fog-local-network
          python3 -m venv env
          . ./env/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          ./build.sh
      - name: fog_conformance_tests.py
        run: |
          . tools/fog-local-network/env/bin/activate
          python3 tools/fog-local-network/fog_conformance_tests.py --release
      - name: Upload core dumps
        uses: ./.github/actions/upload-core-dumps
      - name: Check dirty git
        uses: ./.github/actions/check-dirty-git

    env:
      TEST_DATABASE_URL: "postgres://postgres:postgres@postgres"

    services:
      # Spin up a PostgreSQL server
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

  fog-local-network-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3'
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: Build and generate sample data
        run: |
          # Generate enclave signing key
          openssl genrsa -out Enclave_private.pem -3 3072
          export CONSENSUS_ENCLAVE_PRIVKEY=$PWD/Enclave_private.pem
          export INGEST_ENCLAVE_PRIVKEY=$PWD/Enclave_private.pem
          export LEDGER_ENCLAVE_PRIVKEY=$PWD/Enclave_private.pem
          export VIEW_ENCLAVE_PRIVKEY=$PWD/Enclave_private.pem
          export MC_LOG=trace

          # tell the operating system to remove the file size limit on core dump files
          ulimit -c unlimited

          # Build binaries
          cargo build -p mc-util-keyfile -p mc-util-generate-sample-ledger -p mc-consensus-service -p mc-ledger-distribution -p mc-admin-http-gateway -p mc-util-grpc-admin-tool -p mc-mobilecoind -p mc-crypto-x509-test-vectors -p mc-fog-distribution -p mc-fog-test-client -p mc-fog-ingest-server -p mc-fog-ingest-client -p mc-fog-view-server -p mc-fog-report-server -p mc-fog-ledger-server -p mc-fog-sql-recovery-db --release

          # Generate sample keys and ledger.
          export FOG_AUTHORITY_ROOT=$(./target/release/mc-crypto-x509-test-vectors --type=chain --test-name=ok_rsa_head)
          ./target/release/sample-keys --num 10 --seed=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          ./target/release/generate-sample-ledger --txs 100

          # Generate sample Fog keys
          ./target/release/sample-keys --num 4 --output-dir fog_keys --fog-report-url 'insecure-fog://localhost:6200' --fog-authority-root $FOG_AUTHORITY_ROOT
      - name: Run local network
        run: |
          # Run local network in background.
          MC_LOG="info,rustls=warn,hyper=warn,tokio_reactor=warn,mio=warn,want=warn,rusoto_core=error,h2=error,reqwest=error,rocket=error,<unknown>=error" \
          LEDGER_BASE=$PWD/ledger \
          python3 tools/fog-local-network/fog_local_network.py --network-type dense5 --skip-build &
          # Give it time to spin up
          sleep 20

          # Run fog-distribution client to exercise Fog
          ./target/release/fog-distribution \
              --block-version 3 \
              --sample-data-dir . \
              --max-threads 1 \
              --peer insecure-mc://localhost:3200/ \
              --peer insecure-mc://localhost:3201/ \
              --peer insecure-mc://localhost:3202/ \
              --peer insecure-mc://localhost:3203/ \
              --peer insecure-mc://localhost:3204/ \
              --num-tx-to-send 10
          # Give it time to spin up
          sleep 20

          # Run test-client
          ./target/release/test_client \
              --consensus insecure-mc://localhost:3200/ \
              --consensus insecure-mc://localhost:3201/ \
              --consensus insecure-mc://localhost:3202/ \
              --consensus insecure-mc://localhost:3203/ \
              --consensus insecure-mc://localhost:3204/ \
              --num-clients 4 \
              --num-transactions 200 \
              --consensus-wait 300 \
              --transfer-amount 20 \
              --fog-view insecure-fog-view://localhost:8200 \
              --fog-ledger insecure-fog-ledger://localhost:8200 \
              --key-dir $PWD/fog_keys
      - name: Upload core dumps
        uses: ./.github/actions/upload-core-dumps
      - name: Check dirty git
        uses: ./.github/actions/check-dirty-git

    env:
      TEST_DATABASE_URL: "postgres://postgres:postgres@postgres"

    services:
      # Spin up a PostgreSQL server
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

  publish-test-results:
    runs-on: ubuntu-latest
    if: success() || failure()
    needs:
      - mc-tests
      - consensus-tests
      - fog-tests
      - fog-ingest-tests
    steps:
    - name: Download XML reports
      if: success() || failure()
      uses: actions/download-artifact@v3
      with:
        name: junit-xml
    - name: Publish Test Report
      if: success() || failure()
      uses: mikepenz/action-junit-report@v3
      with:
        check_name: Test Report
        report_paths: '**/*.xml'
        update_check: true

# via https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
